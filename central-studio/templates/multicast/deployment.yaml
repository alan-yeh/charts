{{- $conf := mustMergeOverwrite (deepCopy .Values.global) (deepCopy .Values.multicast) -}}
{{- if $conf.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $conf.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "multicast.labels" . | nindent 4 }}
spec:
  {{- if $conf.maintenance }}
  replicas: 0
  {{- else if not $conf.autoscaling.enabled }}
  replicas: {{ $conf.autoscaling.minReplicas }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "multicast.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "multicast.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ $conf.name }}
          image: "{{ $conf.image.registry }}/{{ $conf.image.repository }}:{{ $conf.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ $conf.image.pullPolicy }}
          args:
            {{- range $conf.jvm }}
            - {{ . | quote }}
            {{- end }}
          ports:
            - name: http
              containerPort: 3600
              protocol: TCP
          resources:
          {{- toYaml $conf.resources | nindent 12 }}
          {{- if $conf.probes.startup.enabled }}
          startupProbe:
            httpGet:
              port: http
              path: /multicast/__probe
              httpHeaders:
                - name: Authorization
                  value: {{ $conf.probes.authorization }}
            initialDelaySeconds: {{ $conf.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ $conf.probes.startup.periodSeconds }}
            timeoutSeconds: {{ $conf.probes.startup.timeoutSeconds }}
            failureThreshold: {{ $conf.probes.startup.failureThreshold }}
          {{- end }}
          {{- if $conf.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              port: http
              path: /multicast/__probe
              httpHeaders:
                - name: Authorization
                  value: {{ $conf.probes.authorization }}
            {{- if not $conf.probes.startup.enabled }}
            initialDelaySeconds: {{ $conf.probes.liveness.initialDelaySeconds }}
            {{- end }}
            periodSeconds: {{ $conf.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ $conf.probes.liveness.timeoutSeconds }}
            successThreshold: {{ $conf.probes.liveness.successThreshold }}
            failureThreshold: {{ $conf.probes.liveness.failureThreshold }}
          {{- end }}
          {{- if $conf.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              port: http
              path: /multicast/__probe
              httpHeaders:
                - name: Authorization
                  value: {{ $conf.probes.authorization }}
            {{- if not $conf.probes.startup.enabled }}
            initialDelaySeconds: {{ $conf.probes.readiness.initialDelaySeconds }}
            {{- end }}
            periodSeconds: {{ $conf.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ $conf.probes.readiness.timeoutSeconds }}
            successThreshold: {{ $conf.probes.readiness.successThreshold }}
            failureThreshold: {{ $conf.probes.readiness.failureThreshold }}
          {{- end }}
      {{- with $conf.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $conf.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $conf.affinity }}
      {{- with $conf.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- else }}
      affinity:
        # 让 Pod 只调度到对应命名空间的节点上，保证生产环境和预发布环境节点隔离
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node.kubernetes.io/namespace
                    operator: In
                    values: [{{ .Release.Namespace | quote }}]
        # 让 Pod 分布到不同的节点上，避免单点故障
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchExpressions:
                    - key: "app.kubernetes.io/name"
                      operator: In
                      values: [{{ $conf.name | quote }}]
                    - key: "app.kubernetes.io/instance"
                      operator: In
                      values: [{{ .Release.Name | quote }}]
      {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "global.name" . }}
        - name: log-volume
          emptyDir: {}
{{- end }}