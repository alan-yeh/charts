##################################################################
# 全局配置
##################################################################
global:
  # 启用状态
  # 如果设为 false，则将不部署指定服务
  enabled: true
  # 维护状态
  # 当进入维护状态时，hpa 将会失效，所有的 Deployment 和 StatefulSet 的 replicas 将被设置 0
  maintenance: false
  image:
    # 镜像仓库地址
    registry: docker.io/centralx
    # 镜像拉取策略
    # Always: 无论本地是否存在指定 tag 的镜像，都从镜像仓库中拉取
    # IfNotPresent: 如果本地存在指定 tag 的镜像，则直接使用本地镜歇
    # Never: 不拉取镜像。如果本地没有镜像，则直接启动失败
    pullPolicy: Always
  # 资源限制
  resources:
    # 镜像资源限制
    limits:
      # 1 个 CPU 核心等于 1000m
      # 查看官网了解更多说明 https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu
      cpu: 500m
      # 内存资源代码有 Ki、Mi、Gi、Ti、Pi、Ei，一般以 Mi 为主
      # 注意，内存不要设置过高，达到可用级别就好
      # 单个副本扩大内存的收益不如多个副本高
      memory: 512Mi
  # Jvm 资源限制
  jvm:
    - "-Xmx256m"
    - "-Xms256m"
  # 自动横向拓展
  autoscaling:
    # 是否启用自动横向拓展。如果不启用，则默认启动 minReplicas 个副本
    enabled: false
    # 最小副本数量
    minReplicas: 1
    # 最大副本数量
    maxReplicas: 2
    # CPU 超过 resource.limits.cpu 里面限制的 60% 就触发横向拓展
    targetCPUPercentage: 60
  # 探针
  probes:
    # 探针授权凭证
    authorization: cyLfRYFSnhHOpqAAzFyqvCpOwnlIyzJcCUIQqYHSKaOcnTqtiBjhOvKLNasivqjI
    # 启动探针
    # 启用了启动探针时，存活探针和就绪探针的 initialDelaySeconds 将失效
    startup:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      failureThreshold: 20
    # 存活探针
    liveness:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
    # 就绪探针
    readiness:
      enabled: false
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
  # 节点选择器
  nodeSelector: {}
  # 污点容忍度
  tolerations: []
  # 亲和性
  # 如果为空时，默认的亲和性规则如下:
  # 1. 高可用时，尽量将同一应用的 Pod 分布到不同的节点上，避免单点故障
  # 2. 必须将应用调度到与当前命名空间相同的节点上，保证生产环境和预发布环境节点隔离（节点需要提前打上标签 node.kubernetes.io/namespace=<namespace>）
  # 如果不为空时，以用户的亲和性为准
  affinity: {}
  # 通用配置文件，里面的内容会挂载到 /application/config 目录下
  # 不要将不通用的配置写到这里
  config:
    application.yaml: |
      logging:
        config: classpath:logback-http.xml
      spring:
        datasource:
          name: master
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://mysql:3306/centralx?useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
          username: root
          password: <password>
  # 存储配置
  # 系统将会把数据存放到这个存储卷下
  pvc:
    storageClassName: permanent
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi

##################################################################
# 应用流量入口配置
##################################################################
ingress:
  enabled: true
  className: nginx
  # 完成部署后，如果未指定 host，则 Central Studio 默认监听 <release>.<namespace>.cluster.k8s
  #host: ingress.central.k8s
  annotations: {}

##################################################################
# 应用配置
##################################################################

# 网关
gateway:
  name: central-gateway
  image:
    repository: central-gateway

# 认证中心
identity:
  name: central-identity
  image:
    repository: central-identity

# 仪表中心
dashboard:
  name: central-dashboard
  image:
    repository: central-dashboard

# 数据服务中心
provider:
  name: central-provider
  image:
    repository: central-provider
  probes:
    startup:
      initialDelaySeconds: 20

# 日志中心
logging:
  name: central-logging
  image:
    repository: central-logging

# 存储中心
storage:
  name: central-storage
  image:
    repository: central-storage

# 广播中心
multicast:
  name: central-multicast
  image:
    repository: central-multicast